#include "ListBox.h"

void RadixSort(Queue<int> &dat) {
	Queue<int> Filter[10];
	int ditgit = 0;
	int bait = 1;
	int max = 0;
	for (NodeQueue<int>* i = dat.GetFront(); i != NULL; i = i->next)
	{
		if (i->dat > max) max = i->dat;
	}
	while (max / bait > 0)
	{
		while (!dat.Empty())
		{
			NodeQueue<int> *tempPrt = dat.GetNode();
			ditgit = tempPrt->dat % (bait * 10) / bait;
			Filter[ditgit].AddNode(tempPrt);
		}
		bait *= 10;
		//
		//connect list
		//
		for (int i = 1; i < 10; i++) {
			Filter->AddListLast(Filter[i]);
			Filter[i].reset();
		}
		//
		//chuyen ve mang ban dau
		//
		dat = Filter[0];
		Filter->reset();
	}
}

void RadixSortStr(Queue<DataBase*> &dat) {
	Queue<DataBase*> Filter[26];
	for (int i = 0; i < 26; i++) Filter[i].reset();
	char ditgit = NULL;
	int bait = 0;
	int max = 0;
	for (NodeQueue<DataBase*>* i = dat.GetFront(); i != NULL; i = i->next)
	{
		int Len = i->dat->GetWord().length();
		if (Len > max) max = Len;
	}
	while (max >= bait)
	{
		while (!dat.Empty())
		{
			NodeQueue<DataBase*> *tempPrt = dat.GetNode();
			int lenght = tempPrt->dat->GetWord().length() - 1;
			if (lenght >= bait) {
				ditgit = tempPrt->dat->GetWord()[lenght - bait];
				Filter[::toupper(ditgit) - 65].AddNode(tempPrt);
			}
			else Filter->AddNode(tempPrt);

		}
		++bait;
		//
		//connect list
		//
		for (int i = 1; i < 26; i++) {
			Filter->AddListLast(Filter[i]);
			Filter[i].reset();
		}
		//
		//chuyen ve mang ban dau
		//
		dat = Filter[0];
		Filter->reset();
	}
}

void ListBox::SetDataList(Queue<DataBase*>& DataList)
{
	RadixSortStr(DataList);
	for (NodeQueue<DataBase*>* i = DataList.GetFront(); i != NULL; i = i->next) {
		_DataList->Insert(i);
	}
	_PosPrint = _DataList->GetFirst();
	_SeletePre = _PosPrint;
	_SeleteCur = _PosPrint;
}

void ListBox::SetDataList(ListQueueStr *DataList)
{
	_DataList = DataList;
	_PosPrint = _DataList->GetFirst();
	_SeletePre = _PosPrint;
	_SeleteCur = _PosPrint;
}

void ListBox::AddNode(NodeQueue<DataBase*>* Node)
{

}

void ListBox::Show()
{
	DrawCri( _Width + 1, _Height);
}

void ListBox::DrawCri( unsigned int Width, unsigned int Height)
{
	gotoXY(_PosX, _PosY);
	std::cout << char(218);
	for (int i = 0; i < Width; i++)
	{
		std::cout << char(196);
	}
	std::cout << char(191);
	int temp = whereX() - 1;
	for (int i = 1; i <= Height; i++)
	{
		gotoXY(temp, _PosY + i);
		std::cout << char(179);
	}
	gotoXY(whereX() - 1, whereY() + 1);
	std::cout << char(217);
	gotoXY(_PosX, whereY());
	std::cout << char(192);
	for (int i = 0; i < Width; i++)
	{
		std::cout << char(196);
	}
	for (int i = 1; i <= Height; i++)
	{
		gotoXY(_PosX, _PosY + i);
		std::cout << char(179);
	}
}

bool ListBox::Action(StatusMouse *sMouse) 
{
	int CKey = NULL;
	if (CheckMouse(*sMouse)) {
		//chi so vi tri dang duoc to  mau
		unsigned int Height = _PosLast->NumBer - _PosPrint->NumBer + 1;
		unsigned int numMenuCur = _SeleteCur->NumBer - _PosPrint->NumBer + 1;
		unsigned int numMenuPre = Height;
		int dem = 0;

		//thuc hien chon menu bang phim va chuot
		bool BlMouse = true;
		do {
			Height = _PosLast->NumBer - _PosPrint->NumBer + 1;
			bool stop = false;
			while (!stop && (BlMouse || CKey != 0))
			{
				if (BlMouse&&sMouse->_kindMouse == 1 || sMouse->_kindMouse == 3) {
					int temp = sMouse->y - _PosY;
					if (temp <= Height&&temp > 0) {
						numMenuPre = numMenuCur;
						numMenuCur = temp;
						PaintCor(numMenuCur - 1, numMenuPre - 1);
					}
					if (sMouse->_kindMouse == 3) {
						_Lable->Load(_SeleteCur->dat->dat);
					}
				}
				else stop = CenterKey(CKey, numMenuCur, numMenuPre, Height);//xy ly phim
				TextColor(ColorCode_Red);
				Print(numMenuCur - 1, _SeleteCur);

				KeyMouse(*sMouse, CKey);// bat su kien chuot va phim
										// xu ly chuot
				BlMouse = CheckMouse(*sMouse);
			}
			//std::cout << BlMouse;
		} while (BlMouse || CKey != 0);
		return 1;
	}
	return 0;
}
#define strData current->dat->dat
void ListBox::LoadData()
{
	/*
	for (int i = 0; i < 40; i++)
	{
		_PosPrint = _PosPrint->Next;
	}
	*/
	NodeDList *current = _PosPrint;// xác định ví trí bắt đầu in
	/*
	for (int i = 0; i < 29; i++) {
		current = current->Next;
	}
	*/
	TextColor(ColorCode_DarkWhite);
	for (int i = 0; i < _Height&&current != NULL; i++) {
		_PosLast = current;
		Print(i,current);
		current = current->Next;
	}
}

ListBox::ListBox()
{
	_DataList = new ListQueueStr;
}

ListBox::ListBox(unsigned int PosX, unsigned int PosY, unsigned int Width, unsigned int Height)
{
	_DataList = new ListQueueStr;
	_PosX = PosX;
	_PosY = PosY;
	_Width = Width;
	_Height = Height;
}


ListBox::~ListBox()
{
}

void ListBox::Print(int No, NodeDList* Val) const
{
	int x = _PosX + 1,
		y = _PosY + 1;
	gotoXY(x, y + No);
	if (Val->prev == NULL || Val->dat->dat->GetWord()[0] != Val->prev->dat->dat->GetWord()[0])
	std::cout <<(char)toupper(Val->dat->dat->GetWord()[0]);
	else std::cout << ' ';
	gotoXY(x + 1, whereY());
	std::string temp = Val->dat->dat->GetWord().substr(0, _Width - 2);
	std::cout << '.' + temp;
	for (int i = 0; i < _Width - temp.length() - 1; i++) std::cout << ' ';
}

void ListBox::PaintCor(unsigned int NoCur,unsigned int NoPre)
{
	_SeletePre = _SeleteCur;

	 int temp = NoCur - _SeleteCur->NumBer + _PosPrint->NumBer;
	// std::cout << _PosPrint->NumBer;
	 if (NoCur == _PosLast->NumBer - _PosPrint->NumBer) {
		 _SeleteCur = _PosLast;
	 }
	 else if (NoCur == 0) {
		 _SeleteCur = _PosPrint;
	 }
	 else if (temp < 0) {
		 for (int i = 0; i < -temp; ++i) _SeleteCur = _SeleteCur->prev;
	 }
	 else if (temp > 0) {
		 for (int i = 0; i < temp; ++i) _SeleteCur = _SeleteCur->Next;
	 }
	
	//
	TextColor(ColorCode_DarkWhite);
	Print(NoPre, _SeletePre);
	TextColor(ColorCode_Red);
	Print(NoCur, _SeleteCur);
}

bool ListBox::CheckMouse(StatusMouse &Mouse) const
{
	int SpaceX = _Width + _PosX + 3,
		SpaceY = _Height + _PosY + 2;
	if (Mouse._kindMouse != 0) {
		ShowCur(false);
		return	Mouse.x >= _PosX&&Mouse.x < SpaceX&&
			Mouse.y >= _PosY&&Mouse.y < SpaceY;
	}
	else return false;
}

bool ListBox::CenterKey(int CKey, unsigned int& numMenuCur, unsigned int& numMenuPre, unsigned int &Height)
{
	switch (CKey)
	{
	case key_Up:
	{
		if (KeyU(numMenuCur, numMenuPre, Height)) goto paint;
		else return true;
	}
	case key_Down:
	{

		if (KeyD(numMenuCur, numMenuPre, Height)) goto paint;
		else return true;
	}
	case 13: 
	{
		_Lable->Load(_SeleteCur->dat->dat);
		break;
	}
paint:
	{
		PaintCor(numMenuCur - 1, numMenuPre - 1);
		break;
	}
	default:
		break;
	}
	return false;
}

bool ListBox::KeyU(unsigned int& numMenuCur, unsigned int& numMenuPre, unsigned int &Height)
{
	if (numMenuCur == 1)
	{
		if (_SeleteCur->prev != NULL) {
			_PosPrint = _PosPrint->prev;
			_SeleteCur = _SeleteCur->prev;
			LoadData();
			return false;
		}
		else { numMenuCur = Height; numMenuPre = 1; }
	}
	else { numMenuPre = numMenuCur; --numMenuCur; }
	return true;
}

bool ListBox::KeyD(unsigned int& numMenuCur, unsigned int& numMenuPre, unsigned int &Height)
{
	if (numMenuCur == Height) {
		if (_SeleteCur->Next != NULL) {
			_PosPrint = _PosPrint->Next;
			_SeleteCur = _SeleteCur->Next;
			LoadData();
			return false;
		}
		else { numMenuCur = 1; numMenuPre = Height; }
	}
	else { numMenuPre = numMenuCur; ++numMenuCur; }
	return true;
}